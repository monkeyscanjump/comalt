"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/contexts/auth/WalletService.ts":
/*!********************************************!*\
  !*** ./src/contexts/auth/WalletService.ts ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletService: function() { return /* binding */ WalletService; }\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config */ \"(app-pages-browser)/./src/config/index.ts\");\n/* harmony import */ var _lib_polkadot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/polkadot */ \"(app-pages-browser)/./src/lib/polkadot.ts\");\n\n\nclass WalletService {\n    /**\n   * Check if wallet extension is available without requesting permissions\n   */ static async isAvailable() {\n        if (false) {}\n        return (0,_lib_polkadot__WEBPACK_IMPORTED_MODULE_1__.isExtensionAvailable)();\n    }\n    /**\n   * Enable wallet extension\n   */ static async enableWallet() {\n        let appName = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _config__WEBPACK_IMPORTED_MODULE_0__.config.app.name;\n        if (false) {}\n        try {\n            console.log(\"Enabling wallet extension...\");\n            // Clear any previous state to avoid conflicts\n            this.initialized = false;\n            // Enable the extension with proper app name\n            const extensions = await (0,_lib_polkadot__WEBPACK_IMPORTED_MODULE_1__.web3Enable)(appName);\n            console.log(\"Available extensions:\", extensions);\n            // Successfully enabled if any extension is returned\n            const hasExtension = extensions && extensions.length > 0;\n            this.initialized = hasExtension;\n            // Start monitoring accounts if enabled\n            if (hasExtension) {\n                this.startAccountsMonitoring();\n            }\n            return hasExtension;\n        } catch (error) {\n            console.error(\"Error enabling wallet:\", error);\n            return false;\n        }\n    }\n    /**\n   * Get accounts from wallet\n   * If the wallet isn't enabled yet, this will enable it first\n   */ static async getAccounts() {\n        if (false) {}\n        try {\n            // Ensure wallet is enabled\n            if (!this.initialized) {\n                const enabled = await this.enableWallet();\n                if (!enabled) return [];\n            }\n            // Use proper empty options object\n            const accounts = await (0,_lib_polkadot__WEBPACK_IMPORTED_MODULE_1__.web3Accounts)({});\n            this.lastKnownAccounts = accounts;\n            return accounts;\n        } catch (error) {\n            console.error(\"Failed to get accounts:\", error);\n            return [];\n        }\n    }\n    /**\n   * Sign a message with wallet\n   * Ensures proper message formatting for consistent signing\n   */ static async signMessage(address, message) {\n        if (false) {}\n        try {\n            // Ensure wallet is enabled\n            if (!this.initialized) {\n                const enabled = await this.enableWallet();\n                if (!enabled) return null;\n            }\n            // Format message properly\n            const formattedMessage = _lib_polkadot__WEBPACK_IMPORTED_MODULE_1__.prepareMessage ? (0,_lib_polkadot__WEBPACK_IMPORTED_MODULE_1__.prepareMessage)(message) : message;\n            console.log(\"Requesting signature for:\", {\n                address,\n                message: formattedMessage\n            });\n            // Fix signMessage parameters - removing callbackFn if it's causing errors\n            const signature = await (0,_lib_polkadot__WEBPACK_IMPORTED_MODULE_1__.web3SignMessage)({\n                address,\n                message: formattedMessage\n            });\n            console.log(\"Signature received\");\n            return signature;\n        } catch (error) {\n            console.error(\"Signing error:\", error);\n            // Check if the error is a rejection\n            const isRejection = error instanceof Error && (error.message.toLowerCase().includes(\"reject\") || error.message.toLowerCase().includes(\"cancel\"));\n            // Rethrow with more context\n            if (isRejection) {\n                throw new Error(\"WALLET_REJECTION: \".concat(error.message));\n            }\n            throw error;\n        }\n    }\n    /**\n   * Start monitoring wallet accounts\n   * This keeps lastKnownAccounts up to date and can notify listeners of changes\n   */ static startAccountsMonitoring() {\n        if (false) {}\n        // Clear any existing subscription\n        if (this.accountsSubscription) {\n            this.accountsSubscription();\n            this.accountsSubscription = null;\n        }\n        // Start a new subscription\n        (0,_lib_polkadot__WEBPACK_IMPORTED_MODULE_1__.web3AccountsSubscribe)((accounts)=>{\n            this.lastKnownAccounts = accounts;\n            this.notifyAccountsChanged(accounts);\n        }).then((unsubscribe)=>{\n            this.accountsSubscription = unsubscribe;\n        }).catch((error)=>{\n            console.error(\"Failed to subscribe to accounts:\", error);\n        });\n    }\n    /**\n   * Stop monitoring wallet accounts\n   */ static stopAccountsMonitoring() {\n        if (this.accountsSubscription) {\n            this.accountsSubscription();\n            this.accountsSubscription = null;\n        }\n    }\n    /**\n   * Get the last known accounts without making a new request\n   */ static getCachedAccounts() {\n        return this.lastKnownAccounts;\n    }\n    /**\n   * Subscribe to account changes\n   * Returns a function to unsubscribe\n   */ static subscribeToAccountChanges(callback) {\n        this.accountListeners.add(callback);\n        // If we already have accounts, notify immediately\n        if (this.lastKnownAccounts.length > 0) {\n            setTimeout(()=>callback(this.lastKnownAccounts), 0);\n        }\n        return ()=>{\n            this.accountListeners.delete(callback);\n        };\n    }\n    /**\n   * Notify all listeners about account changes\n   */ static notifyAccountsChanged(accounts) {\n        this.accountListeners.forEach((listener)=>{\n            try {\n                listener(accounts);\n            } catch (error) {\n                console.error(\"Error in account change listener:\", error);\n            }\n        });\n    }\n}\n// Track initialization state\nWalletService.initialized = false;\nWalletService.accountsSubscription = null;\nWalletService.lastKnownAccounts = [];\n// Account change listeners\nWalletService.accountListeners = new Set();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/auth/WalletService.ts\n"));

/***/ })

});