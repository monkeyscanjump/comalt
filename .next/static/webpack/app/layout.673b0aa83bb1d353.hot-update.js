"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/contexts/auth/AuthProvider.tsx":
/*!********************************************!*\
  !*** ./src/contexts/auth/AuthProvider.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _AuthContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AuthContext */ \"(app-pages-browser)/./src/contexts/auth/AuthContext.tsx\");\n/* harmony import */ var _WalletService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WalletService */ \"(app-pages-browser)/./src/contexts/auth/WalletService.ts\");\n/* harmony import */ var _config_whitelist__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/config/whitelist */ \"(app-pages-browser)/./src/config/whitelist.ts\");\n/* __next_internal_client_entry_do_not_use__ AuthProvider auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nconst AuthProvider = (param)=>{\n    let { children } = param;\n    var _selectedAccount_address;\n    _s();\n    // Account and wallet states\n    const [walletAddress, setWalletAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [accounts, setAccounts] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedAccount, setSelectedAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // UI states\n    const [isConnecting, setIsConnecting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showAccountSelector, setShowAccountSelector] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Authentication states\n    const [isAuthenticated, setIsAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isAllowed, setIsAllowed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [token, setToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Signature states\n    const [wasSignatureRejected, setWasSignatureRejected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isRequestingSignature, setIsRequestingSignature] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Public mode detection\n    const isPublicMode = !(0,_config_whitelist__WEBPACK_IMPORTED_MODULE_4__.hasWhitelistedAddresses)();\n    // Calculate derived states\n    const isWalletConnected = !!selectedAccount || !!walletAddress;\n    // Initialize auth state\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initAuth = async ()=>{\n            try {\n                // Restore connection from localStorage if available\n                const storedAddress = localStorage.getItem(\"wallet-address\");\n                const storedToken = localStorage.getItem(\"auth-token\");\n                if (storedAddress) {\n                    setWalletAddress(storedAddress);\n                    // Get accounts if extension is available\n                    try {\n                        const isEnabled = await _WalletService__WEBPACK_IMPORTED_MODULE_3__.WalletService.enableWallet();\n                        if (isEnabled) {\n                            const walletAccounts = await _WalletService__WEBPACK_IMPORTED_MODULE_3__.WalletService.getAccounts();\n                            setAccounts(walletAccounts);\n                            // Find the stored account\n                            const account = walletAccounts.find((acc)=>acc.address === storedAddress);\n                            if (account) {\n                                setSelectedAccount(account);\n                                // We set isAllowed here too to ensure the auto-signature effect can run\n                                setIsAllowed(isPublicMode || (0,_config_whitelist__WEBPACK_IMPORTED_MODULE_4__.hasWhitelistedAddresses)());\n                            }\n                        }\n                    } catch (err) {\n                        console.warn(\"Failed to restore wallet connection:\", err);\n                    }\n                    // Restore auth state\n                    if (storedToken) {\n                        setToken(storedToken);\n                        setIsAuthenticated(true);\n                        setIsAllowed(true);\n                        try {\n                            // Optionally restore user data if you have it\n                            const userData = localStorage.getItem(\"user-data\");\n                            if (userData) {\n                                setUser(JSON.parse(userData));\n                            }\n                        } catch (e) {\n                            console.warn(\"Failed to restore user data:\", e);\n                        }\n                    }\n                }\n            } catch (err) {\n                console.error(\"Error initializing auth:\", err);\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        initAuth();\n    }, []);\n    // NEW EFFECT: Automatically trigger signature request when wallet is connected but not authenticated\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Skip if still loading, already authenticated, requesting signature, or in public mode\n        if (isLoading || isAuthenticated || isRequestingSignature || isPublicMode) {\n            return;\n        }\n        // If we have a connected wallet and it's allowed but not authenticated, request signature\n        if (selectedAccount && isAllowed && !isAuthenticated) {\n            console.log(\"[AUTH] Auto-triggering signature request for connected wallet:\", selectedAccount.address);\n            // Short delay to ensure all state is properly updated\n            const timer = setTimeout(async ()=>{\n                try {\n                    await requestSignature(selectedAccount.address);\n                } catch (err) {\n                    console.error(\"Failed to auto-request signature:\", err);\n                }\n            }, 300);\n            return ()=>clearTimeout(timer);\n        }\n    }, [\n        selectedAccount,\n        isAllowed,\n        isAuthenticated,\n        isLoading,\n        isRequestingSignature,\n        isPublicMode\n    ]);\n    // Connect wallet\n    const connect = async ()=>{\n        setIsConnecting(true);\n        setError(null);\n        try {\n            // Enable wallet extension\n            const isEnabled = await _WalletService__WEBPACK_IMPORTED_MODULE_3__.WalletService.enableWallet();\n            if (!isEnabled) {\n                throw new Error(\"Wallet extension not found or not enabled\");\n            }\n            // Get accounts\n            const walletAccounts = await _WalletService__WEBPACK_IMPORTED_MODULE_3__.WalletService.getAccounts();\n            if (!walletAccounts || walletAccounts.length === 0) {\n                throw new Error(\"No accounts found in wallet\");\n            }\n            // Update state\n            setAccounts(walletAccounts);\n            setShowAccountSelector(true);\n            return true;\n        } catch (err) {\n            console.error(\"Wallet connection error:\", err);\n            setError(err instanceof Error ? err.message : \"Failed to connect wallet\");\n            return false;\n        } finally{\n            setIsConnecting(false);\n        }\n    };\n    // Select account\n    const selectAccount = async (account)=>{\n        console.log(\"Account selected:\", account.address);\n        // Update state with selected account\n        setSelectedAccount(account);\n        setWalletAddress(account.address);\n        setShowAccountSelector(false);\n        // Save to localStorage\n        localStorage.setItem(\"wallet-address\", account.address);\n        // Check if the account is allowed\n        const allowed = isPublicMode || (0,_config_whitelist__WEBPACK_IMPORTED_MODULE_4__.hasWhitelistedAddresses)();\n        setIsAllowed(allowed);\n    // NOTE: We no longer need to manually trigger requestSignature here\n    // The useEffect we added above will handle this automatically\n    };\n    // Sign message\n    const signMessage = async (message, accountOverride)=>{\n        const addressToUse = (accountOverride === null || accountOverride === void 0 ? void 0 : accountOverride.address) || (selectedAccount === null || selectedAccount === void 0 ? void 0 : selectedAccount.address) || walletAddress;\n        if (!addressToUse) return null;\n        try {\n            console.log(\"Signing message for address:\", addressToUse);\n            return await _WalletService__WEBPACK_IMPORTED_MODULE_3__.WalletService.signMessage(addressToUse, message);\n        } catch (err) {\n            console.error(\"Signature error:\", err);\n            // Check if user rejected the signature\n            const isRejection = err instanceof Error && (err.message.toLowerCase().includes(\"reject\") || err.message.toLowerCase().includes(\"cancel\") || err.message.toLowerCase().includes(\"denied\") || err.message.toLowerCase().includes(\"user cancelled\"));\n            if (isRejection) {\n                console.log(\"Setting wasSignatureRejected to true\");\n                setWasSignatureRejected(true);\n            }\n            throw err;\n        }\n    };\n    // Request signature for authentication\n    const requestSignature = async (address)=>{\n        if (!address) return false;\n        console.log(\"Starting signature request for address:\", address);\n        setIsRequestingSignature(true);\n        setWasSignatureRejected(false);\n        try {\n            var _selectedAccount_meta;\n            // Create a unique message\n            const message = \"Sign this message to authenticate with Download Manager: \".concat(Date.now());\n            // Get signature - this might throw if rejected\n            console.log(\"Requesting signature for message:\", message);\n            const signature = await signMessage(message);\n            if (!signature) {\n                console.warn(\"No signature returned\");\n                return false;\n            }\n            console.log(\"Signature received, authenticating...\");\n            // In a real app, you'd verify this signature on the server\n            // For demo, we'll just set a token\n            const demoToken = \"demo-auth-token-\" + Date.now();\n            setToken(demoToken);\n            localStorage.setItem(\"auth-token\", demoToken);\n            // Set authenticated state\n            setIsAuthenticated(true);\n            // Create demo user\n            const demoUser = {\n                id: \"1\",\n                address,\n                name: (selectedAccount === null || selectedAccount === void 0 ? void 0 : (_selectedAccount_meta = selectedAccount.meta) === null || _selectedAccount_meta === void 0 ? void 0 : _selectedAccount_meta.name) || null,\n                isAdmin: true,\n                createdAt: new Date(),\n                updatedAt: new Date(),\n                lastLoginAt: new Date()\n            };\n            setUser(demoUser);\n            localStorage.setItem(\"user-data\", JSON.stringify(demoUser));\n            return true;\n        } catch (err) {\n            console.error(\"Signature request failed:\", err);\n            // Check if this was a rejection\n            const isRejection = err instanceof Error && (err.message.toLowerCase().includes(\"reject\") || err.message.toLowerCase().includes(\"cancel\") || err.message.toLowerCase().includes(\"denied\"));\n            if (isRejection) {\n                console.log(\"Setting wasSignatureRejected to true\");\n                setWasSignatureRejected(true);\n            } else {\n                setError(err instanceof Error ? err.message : \"Failed to sign message\");\n            }\n            return false;\n        } finally{\n            setIsRequestingSignature(false);\n        }\n    };\n    // Refresh auth token\n    const refreshAuthToken = async ()=>{\n        // In a real app, this would refresh the token with the server\n        // For demo, we'll just generate a new token\n        if (!isAuthenticated || !walletAddress) return false;\n        try {\n            const newToken = \"refreshed-token-\" + Date.now();\n            setToken(newToken);\n            localStorage.setItem(\"auth-token\", newToken);\n            return true;\n        } catch (err) {\n            console.error(\"Token refresh failed:\", err);\n            return false;\n        }\n    };\n    // Logout\n    const logout = ()=>{\n        setSelectedAccount(null);\n        setWalletAddress(null);\n        setIsAuthenticated(false);\n        setIsAllowed(false);\n        setUser(null);\n        setToken(null);\n        // Clear localStorage\n        localStorage.removeItem(\"wallet-address\");\n        localStorage.removeItem(\"auth-token\");\n        localStorage.removeItem(\"user-data\");\n    };\n    // Reset rejection state\n    const resetRejectionState = ()=>{\n        setWasSignatureRejected(false);\n    };\n    // Debug state\n    console.log(\"[AUTH STATE]\", {\n        isWalletConnected,\n        isAuthenticated,\n        isAllowed,\n        wasSignatureRejected,\n        walletAddress: (walletAddress === null || walletAddress === void 0 ? void 0 : walletAddress.slice(0, 8)) + \"...\",\n        account: (selectedAccount === null || selectedAccount === void 0 ? void 0 : (_selectedAccount_address = selectedAccount.address) === null || _selectedAccount_address === void 0 ? void 0 : _selectedAccount_address.slice(0, 8)) + \"...\"\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_AuthContext__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Provider, {\n        value: {\n            // Account states\n            walletAddress,\n            accounts,\n            selectedAccount,\n            // UI states\n            error,\n            showAccountSelector,\n            setShowAccountSelector,\n            // User data\n            user,\n            token,\n            // Core methods\n            logout,\n            connect,\n            selectAccount,\n            signMessage,\n            refreshAuthToken,\n            requestSignature,\n            // Signature states\n            wasSignatureRejected,\n            isRequestingSignature,\n            resetRejectionState,\n            // Derived states\n            isPublicMode,\n            isWalletConnected,\n            isAuthenticated,\n            isLoading,\n            isAllowed,\n            isConnecting\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\crist\\\\monkeyscanjump\\\\download-manager\\\\src\\\\contexts\\\\auth\\\\AuthProvider.tsx\",\n        lineNumber: 314,\n        columnNumber: 5\n    }, undefined);\n};\n_s(AuthProvider, \"p202UMbLtbWP78v8tUbUMqPJJ14=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/auth/AuthProvider.tsx\n"));

/***/ })

});