"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/config/whitelist.ts":
/*!*********************************!*\
  !*** ./src/config/whitelist.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALLOWED_ADDRESSES: function() { return /* binding */ ALLOWED_ADDRESSES; },\n/* harmony export */   hasWhitelistedAddresses: function() { return /* binding */ hasWhitelistedAddresses; },\n/* harmony export */   hasWhitelistedAddressesAsync: function() { return /* binding */ hasWhitelistedAddressesAsync; },\n/* harmony export */   isAddressAllowed: function() { return /* binding */ isAddressAllowed; },\n/* harmony export */   isAddressAllowedAsync: function() { return /* binding */ isAddressAllowedAsync; }\n/* harmony export */ });\n/**\n * Whitelist configuration\n * This uses server-side API calls to check whitelist status securely\n */ // Cache for public mode status\nlet publicModeCache = {\n    value: null,\n    timestamp: 0\n};\n// Cache for address validation results\nconst addressValidationCache = new Map();\n// Cache TTL in milliseconds (5 minutes)\nconst CACHE_TTL = 5 * 60 * 1000;\n/**\n * Check if any addresses are configured in the whitelist\n */ async function hasWhitelistedAddressesAsync() {\n    try {\n        // Check cache first\n        const now = Date.now();\n        if (publicModeCache.value !== null && now - publicModeCache.timestamp < CACHE_TTL) {\n            return !publicModeCache.value;\n        }\n        const response = await fetch(\"/api/auth/check-mode/\");\n        if (!response.ok) {\n            console.error(\"Error checking whitelist mode:\", await response.text());\n            throw new Error(\"Failed to check whitelist mode\");\n        }\n        const data = await response.json();\n        console.log(\"Public mode check response:\", data);\n        // Update cache\n        publicModeCache = {\n            value: data.isPublicMode,\n            timestamp: now\n        };\n        return !data.isPublicMode;\n    } catch (error) {\n        console.error(\"Error checking whitelist mode:\", error);\n        // Assume restricted mode by default for safety\n        return true;\n    }\n}\n/**\n * Synchronous version that uses cached result\n */ function hasWhitelistedAddresses() {\n    // Use cached value if available and not expired\n    const now = Date.now();\n    if (publicModeCache.value !== null && now - publicModeCache.timestamp < CACHE_TTL) {\n        return !publicModeCache.value;\n    }\n    // Trigger async check to update cache\n    hasWhitelistedAddressesAsync().catch(console.error);\n    // Default to restricted mode for safety if no cached data\n    return publicModeCache.value === null ? true : !publicModeCache.value;\n}\n/**\n * Check if a wallet address is allowed to access the application\n */ async function isAddressAllowedAsync(address) {\n    if (!address) return false;\n    try {\n        // Check cache first\n        const now = Date.now();\n        const cached = addressValidationCache.get(address);\n        if (cached && now - cached.timestamp < CACHE_TTL) {\n            return cached.isAllowed;\n        }\n        // If we have a definitive public mode cache and it's true, all addresses are allowed\n        if (publicModeCache.value === true && now - publicModeCache.timestamp < CACHE_TTL) {\n            addressValidationCache.set(address, {\n                isAllowed: true,\n                timestamp: now\n            });\n            return true;\n        }\n        const response = await fetch(\"/api/auth/validate-address/\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                address\n            })\n        });\n        if (!response.ok) {\n            console.error(\"Error validating address:\", await response.text());\n            throw new Error(\"Failed to validate address\");\n        }\n        const data = await response.json();\n        console.log(\"Address validation response:\", data);\n        // Cache result\n        addressValidationCache.set(address, {\n            isAllowed: data.isAllowed,\n            timestamp: now\n        });\n        return data.isAllowed;\n    } catch (error) {\n        console.error(\"Error validating address:\", error);\n        return false; // Default to not allowed for safety\n    }\n}\n/**\n * Synchronous version that uses cached result\n */ function isAddressAllowed(address) {\n    if (!address) return false;\n    const now = Date.now();\n    // Use cached value if available and not expired\n    const cached = addressValidationCache.get(address);\n    if (cached && now - cached.timestamp < CACHE_TTL) {\n        return cached.isAllowed;\n    }\n    // If we have a definitive public mode cache and it's true, all addresses are allowed\n    if (publicModeCache.value === true && now - publicModeCache.timestamp < CACHE_TTL) {\n        addressValidationCache.set(address, {\n            isAllowed: true,\n            timestamp: now\n        });\n        return true;\n    }\n    // Trigger async check to update cache\n    isAddressAllowedAsync(address).catch(console.error);\n    // Default to not allowed if we have no cached data yet\n    return false;\n}\n// Empty array for backward compatibility\nconst ALLOWED_ADDRESSES = [];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/config/whitelist.ts\n"));

/***/ })

});